import streamlit as st
import matplotlib.pyplot as plt

# --- Configura√ß√£o da p√°gina ---
st.set_page_config(page_title="Comparador de Descontos", layout="wide")
st.title("üí∏ Comparador de Descontos")

# --- Valores padr√£o ---
DEFAULTS = {
    'aluguer': 280.0,
    'perc_aluguer': 7.0,
    'seguro': 45.0,
    'perc_seguro': 12.0,
    'manutencao': 20.0
}

# Inicializa valores no estado da sess√£o
for key, value in DEFAULTS.items():
    if key not in st.session_state:
        st.session_state[key] = value

# --- Entradas do usu√°rio ---
with st.container():
    st.header("Entradas do Usu√°rio")
    col1, col2 = st.columns([1,1])
    with col1:
        apuro = st.number_input("üí∞ Apuro total (‚Ç¨)", min_value=0.0, value=800.0, step=10.0, format="%.2f")
    with col2:
        desc_combustivel = st.number_input("‚õΩ Desconto de Combust√≠vel (‚Ç¨)", min_value=0.0, value=200.0, step=1.0, format="%.2f")

apuro_liquido = apuro - desc_combustivel
st.markdown(f"**Apuro L√≠quido:** {apuro_liquido:,.2f} ‚Ç¨")
st.markdown("---")

# --- Op√ß√µes da empresa ---
with st.expander("Modificar Op√ß√µes Padr√£o"):
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Op√ß√£o 1")
        st.number_input("üè† Aluguer (‚Ç¨)", min_value=0.0, value=st.session_state.aluguer, step=1.0, key='aluguer', format="%.2f")
        st.number_input("üëî Percentual (%)", min_value=0.0, value=st.session_state.perc_aluguer, step=0.1, key='perc_aluguer', format="%.2f")
    with col2:
        st.subheader("Op√ß√£o 2")
        st.number_input("üõ°Ô∏è Seguro (‚Ç¨)", min_value=0.0, value=st.session_state.seguro, step=1.0, key='seguro', format="%.2f")
        st.number_input("üëî Percentual (%)", min_value=0.0, value=st.session_state.perc_seguro, step=0.1, key='perc_seguro', format="%.2f")
        st.number_input("üõ†Ô∏è Manuten√ß√£o (‚Ç¨)", min_value=0.0, value=st.session_state.manutencao, step=1.0, key='manutencao', format="%.2f")

st.markdown("---")

# --- Fun√ß√£o de c√°lculo ---
def calcular_sobra(apuro_liquido, percentual, fixo, manutencao=0):
    return apuro_liquido - (apuro_liquido * percentual / 100) - fixo - manutencao

# --- Bot√£o de c√°lculo ---
if st.button("Calcular üîπ"):
    sobra_opcao1 = calcular_sobra(apuro_liquido, st.session_state.perc_aluguer, st.session_state.aluguer)
    sobra_opcao2 = calcular_sobra(apuro_liquido, st.session_state.perc_seguro, st.session_state.seguro, st.session_state.manutencao)

    # --- Resultados em cards lado a lado ---
    col3, col4 = st.columns(2)
    with col3:
        st.markdown("### üìà Op√ß√£o 1")
        st.metric("Sobra (‚Ç¨)", f"{sobra_opcao1:,.2f}")
        st.markdown(f"**Aluguer:** {st.session_state.aluguer:,.2f} ‚Ç¨\n\n**Percentual:** {st.session_state.perc_aluguer}%")
    with col4:
        st.markdown("### üìà Op√ß√£o 2")
        st.metric("Sobra (‚Ç¨)", f"{sobra_opcao2:,.2f}")
        st.markdown(f"**Seguro:** {st.session_state.seguro:,.2f} ‚Ç¨\n\n**Manuten√ß√£o:** {st.session_state.manutencao:,.2f} ‚Ç¨\n\n**Percentual:** {st.session_state.perc_seguro}%")

    # Mensagem de recomenda√ß√£o
    if sobra_opcao1 > sobra_opcao2:
        st.success(f"üéâ A **Op√ß√£o 1** √© a melhor escolha, com diferen√ßa de {(sobra_opcao1 - sobra_opcao2):,.2f} ‚Ç¨.")
    elif sobra_opcao2 > sobra_opcao1:
        st.success(f"üéâ A **Op√ß√£o 2** √© a melhor escolha, com diferen√ßa de {(sobra_opcao2 - sobra_opcao1):,.2f} ‚Ç¨.")
    else:
        st.info("As duas op√ß√µes resultam no mesmo valor.")

    st.markdown("---")

    # --- Gr√°fico comparativo moderno ---
    st.markdown("### üìä Compara√ß√£o Visual")
    fig, ax = plt.subplots(figsize=(8, 4))
    opcoes = ['Op√ß√£o 1', 'Op√ß√£o 2']
    valores = [sobra_opcao1, sobra_opcao2]
    cores = ['#4CAF50' if sobra_opcao1 >= sobra_opcao2 else '#2196F3',
             '#4CAF50' if sobra_opcao2 > sobra_opcao1 else '#2196F3']

    bars = ax.bar(opcoes, valores, color=cores, edgecolor='black', width=0.5)
    ax.set_ylabel('‚Ç¨ Restantes')
    ax.set_title('Compara√ß√£o entre Op√ß√µes', fontsize=14, fontweight='bold')

    # Adiciona valores sobre as barras
    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2, height + 5, f"{height:,.2f} ‚Ç¨", ha='center', fontweight='bold')

    st.pyplot(fig)
